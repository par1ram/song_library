// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: songs_get.sql

package database

import (
	"context"
	"database/sql"
)

const getSongVersesWithPagination = `-- name: GetSongVersesWithPagination :one
WITH verses AS (
  SELECT unnest(string_to_array(text, E'\n\n')) AS verse
  FROM songs
  WHERE id = $1
)
SELECT verse
FROM verses
LIMIT $2 OFFSET $3
`

type GetSongVersesWithPaginationParams struct {
	ID     int32
	Limit  int32
	Offset int32
}

func (q *Queries) GetSongVersesWithPagination(ctx context.Context, arg GetSongVersesWithPaginationParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getSongVersesWithPagination, arg.ID, arg.Limit, arg.Offset)
	var verse interface{}
	err := row.Scan(&verse)
	return verse, err
}

const getSongWithFiltersAndPagination = `-- name: GetSongWithFiltersAndPagination :many
SELECT s.id, g.group_name, s.song_name, s.release_date, s.link
FROM songs s
JOIN groups g ON s.group_id = g.id
WHERE 
  (g.group_name ILIKE '%' || $1 || '%' OR $1 IS NULL) AND
  (s.song_name ILIKE '%' || $2 || '%' OR $2 IS NULL) AND
  (s.release_date = $3 OR $3 IS NULL)
ORDER BY s.release_date DESC
LIMIT $4 OFFSET $5
`

type GetSongWithFiltersAndPaginationParams struct {
	Column1     sql.NullString
	Column2     sql.NullString
	ReleaseDate sql.NullTime
	Limit       int32
	Offset      int32
}

type GetSongWithFiltersAndPaginationRow struct {
	ID          int32
	GroupName   string
	SongName    string
	ReleaseDate sql.NullTime
	Link        sql.NullString
}

func (q *Queries) GetSongWithFiltersAndPagination(ctx context.Context, arg GetSongWithFiltersAndPaginationParams) ([]GetSongWithFiltersAndPaginationRow, error) {
	rows, err := q.db.QueryContext(ctx, getSongWithFiltersAndPagination,
		arg.Column1,
		arg.Column2,
		arg.ReleaseDate,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSongWithFiltersAndPaginationRow
	for rows.Next() {
		var i GetSongWithFiltersAndPaginationRow
		if err := rows.Scan(
			&i.ID,
			&i.GroupName,
			&i.SongName,
			&i.ReleaseDate,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
